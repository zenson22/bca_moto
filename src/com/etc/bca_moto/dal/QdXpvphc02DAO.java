
package com.etc.bca_moto.dal;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.ParameterExpression;
import javax.persistence.criteria.Root;

import com.etc.bca_moto.entities.QdXpvphc02;
import com.etc.bca_moto.entities.QdXpvphc02_;
import com.xdev.dal.JPADAO;

/**
 * Home object for domain model class QdXpvphc02.
 * 
 * @see QdXpvphc02
 */
public class QdXpvphc02DAO extends JPADAO<QdXpvphc02, Long> {
	public QdXpvphc02DAO() {
		super(QdXpvphc02.class);
	}

	/**
	 * @queryMethod Do not edit, method is generated by editor!
	 */
	public List<QdXpvphc02> findBySoQd(final String soQd) {
		final EntityManager entityManager = em();
	
		final CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder();
	
		final ParameterExpression<String> soQdParameter = criteriaBuilder.parameter(String.class, "soQd");
	
		final CriteriaQuery<QdXpvphc02> criteriaQuery = criteriaBuilder.createQuery(QdXpvphc02.class);
	
		final Root<QdXpvphc02> root = criteriaQuery.from(QdXpvphc02.class);
	
		criteriaQuery.where(criteriaBuilder.equal(root.get(QdXpvphc02_.soQuyetDinh), soQdParameter));
	
		final TypedQuery<QdXpvphc02> query = entityManager.createQuery(criteriaQuery);
		query.setParameter(soQdParameter, soQd);
		return query.getResultList();
	}
}